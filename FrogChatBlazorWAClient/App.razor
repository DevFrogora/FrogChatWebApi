@using FrogChatService;
@inject NavigationManager navigationManager
@inject IUserService userService
@inject AuthenticationStateProvider _authStateProvider
@inject IClientStorage clientStorage;

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@CheckAuthenticationStateOnEveryNavigation">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>

</CascadingAuthenticationState>

@code{
    private async Task CheckAuthenticationStateOnEveryNavigation(NavigationContext context)
    {
        var token = await clientStorage.GetItemAsStringAsync("Token");
        if (!string.IsNullOrEmpty(token))
        {
            CustomAuthenticationStateProvider customAuthenticationStateProvider =
            (_authStateProvider as CustomAuthenticationStateProvider);
            var user = (await customAuthenticationStateProvider.
                GetAuthenticationStateAsync()).User;

            if (!user.Identity.IsAuthenticated)
            {
                if (customAuthenticationStateProvider.IsTokenExpired(token))
                {
                    customAuthenticationStateProvider.NotifyOnUserAutentication(token);
                }
                else
                {
                    await clientStorage.RemoveItemAsync("Token");
                    customAuthenticationStateProvider.NotifyOnUserLogout();
                }
            }
        }


    }
}