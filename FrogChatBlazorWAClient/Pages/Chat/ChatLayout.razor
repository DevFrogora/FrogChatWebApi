@using FrogChatModel.ChatModel;
@using FrogChatModel.DTOModel;
@using FrogChatService.WebApiUtils;
@using System.Security.Claims;
@inject IChatLayoutViewModel chatLayoutViewModel
@inject IClientStorage clientStorage
@inject IJSRuntime JS
<div class="top-row ">
    <button class="btn btn-sm btn-warning ml-md-auto" @onclick="chatLayoutViewModel.DisconnectAsync">Disconnect</button> <button @onclick="CheckList">Refresh UI</button>
</div>
<div class="container-fluid bg-secondary text-white">
    <div class="row" style="height: 80vh;">
        <div class="col-12 col-sm-8 ">

            <div @ref="messageParentDiv" class="row bg-dark overflow-auto" style="height: 80vh; ">
                @**@
                <div class="col-12 col-sm-12">
                    @foreach (var message in chatLayoutViewModel.messageList)
                    {
                        var temp = message;
                        <MessageComponent message="@temp" />
                    }
                </div>
            </div>
            <div class="row" style=" ">
                <div class="col-9 col-sm-9 p-0">
                    <input type="text" class="form-control" id="basic-url" aria-describedby="basic-addon3"
                           @bind="chatLayoutViewModel._inputMessage" @bind:event="oninput" @onkeydown="@Enter">
                </div>
                <div class="col-3 col-sm-3 text-center p-0">
                    <button class="btn  btn-primary col-12 " @onclick="SendMessage">Send </button>
                </div>
            </div>

        </div>
        <div class="col-sm-4 d-none d-sm-block" style="background: black;">
            <div class="row overflow-auto h-auto" style="">
                @*height: 90vh;*@
                <div class="col-sm-12">

                    @*@if(chatLayoutViewModel.userList != null){*@

                    @foreach (var user in chatLayoutViewModel.userList.Where(user => user.Roles.Contains("Admin")))
                    {
                        @if(isAdmin){
                            <div class="row">
                                <div class="col-sm-12">
                                    -Admin-
                                </div>
                            </div>
                            isAdmin = false;
                        }
                        <JoinedUser userDto="@user" style="color: red;"></JoinedUser>
                    }
                    @foreach (var user in chatLayoutViewModel.userList.Where(user => user.Roles.Contains("Manager") && !user.Roles.Contains("Admin")))
                    {
                        @if (isManager)
                        {
                            <div class="row">
                                <div class="col-sm-12">
                                    -Manager-
                                </div>
                            </div>
                            isManager = false;
                        }
                        <JoinedUser userDto="user" style="color: cornflowerblue;"></JoinedUser>
                    }

                    @foreach (var user in chatLayoutViewModel.userList.Where(user => user.Roles.Contains("User") && !user.Roles.Contains("Manager") && !user.Roles.Contains("Admin")))
                    {
                        @if (isUser)
                        {
                            <div class="row">
                                <div class="col-sm-12">
                                    -User-
                                </div>
                            </div>
                            isUser = false;
                        }
                        <JoinedUser userDto="user" style="color: whitesmoke;"></JoinedUser>
                    }
                    @*}*@

                </div>
            </div>
        </div>
    </div>
</div>
<AuthorizeView>
    <Authorized>
        @{
            userDto = new UserDto()
                {
                    Email = QueryIdentity.GetClaimValue(context.User, ClaimTypes.Email),

                    Name = QueryIdentity.GetClaimValue(context.User, ClaimTypes.Name),

                    PhotoUrl = QueryIdentity.GetClaimValue(context.User, "picture"),
                };
        }
    </Authorized>
</AuthorizeView>


@code {
    private ElementReference messageParentDiv;
    private UserDto userDto = new();

    protected override async Task OnInitializedAsync()
    {
        chatLayoutViewModel.NotifyToUIUpdate += NotifyToUIUpdate;
        chatLayoutViewModel.NotifyToUIOnMessageDelete += OnMessageDeleteUpdate;
        await chatLayoutViewModel.init(@"https://localhost:44305/chathub", await clientStorage.GetItemAsStringAsync("Token"));
    }

    private void NotifyToUIUpdate()
    {
        InvokeAsync(StateHasChanged);
        JS.InvokeVoidAsync("chatScrollToEnd", messageParentDiv);
    }
    private async void OnMessageDeleteUpdate()
    {
        List<Message> TempmessageList = chatLayoutViewModel.messageList;
        chatLayoutViewModel.messageList = new();
        StateHasChanged();
        foreach (var msg in TempmessageList)
        {
            chatLayoutViewModel.messageList.Add(msg);
            StateHasChanged();
            await Task.Delay(100);
        }

        await InvokeAsync(StateHasChanged);
    }

    void CheckList()
    {
        foreach (var msg in chatLayoutViewModel.messageList)
        {
            Console.WriteLine($" {msg.id}  : {msg.content} ");
        }
    }

    private void SendMessage()
    {
        Message newMessage = new Message()
            {
                content = chatLayoutViewModel._inputMessage,
                dateTime = DateTime.Now,
                user = userDto
            };
        if (!string.IsNullOrEmpty(chatLayoutViewModel._inputMessage))
        {
            chatLayoutViewModel.SendMessage(newMessage);
        }
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SendMessage();
        }
    }

    private bool isAdmin = true;
    private bool isManager = true;
    private bool isUser = true;
}