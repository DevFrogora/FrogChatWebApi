@using FrogChatModel.ChatModel;
@using System.Security.Claims;
@inject IJSRuntime JS
<div class="row mt-3">
    <div class="col-sm-2  col-2  col-lg-1">

        <img src="@messageViewModel.message.user.PhotoUrl"
             alt="avatar 1" style="width: 45px; height: 45px;" referrerpolicy="no-referrer">

    </div>
    <div class="col-sm-10 col-10 col-lg-11">

        <div class="row">
            <div class="col-sm-10 col-10 ">
                <div class="d-inline fw-bold"> @messageViewModel.message.user.Name</div>
                <div class="d-inline fw-light fs-6"> @messageViewModel.message.dateTime.ToLongTimeString() </div>
            </div>
            @if (!IsEditing)
            {
                <div class="col-sm-2 col-2">
                    <div class="dropdown text-end">
                        <span class="  " id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="bi bi-three-dots text-end" data-toggle="dropdown">
                            </span>
                        </span>
                        <ul class="dropdown-menu bg-dark" aria-labelledby="dropdownMenuButton1">
                            <AuthorizeView>
                                <Authorized>
                                    @if (QueryIdentity.GetClaimValue(context.User, ClaimTypes.Email).Equals(messageViewModel.message.user.Email))
                                    {
                                        <li>
                                            <a class="dropdown-item text-white" @onclick="Edit">Edit</a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item text-white" @onclick="@messageViewModel.Delete">Delete</a>
                                        </li>
                                    }
                                </Authorized>
                            </AuthorizeView>

                            <li>
                                <a class="dropdown-item text-white" @onclick="@messageViewModel.CopyId">copy id</a>
                            </li>
                        </ul>
                    </div>

                </div>
            }
        </div>

        <div class="row">
            <div class="col-sm-12 col-12 ">
                @if (IsEditing)
                {
                    <div @ref="refMessageContent" contenteditable="true" class="bg-secondary" @oninput="OnEditingInput"> @messageViewModel.message.content </div>
                }
                else
                {
                    @*<input @bind="@messageViewModel.message.content"  @bind:event="onchange"/>*@
                    <div>
                        @messageViewModel.message.content
                        @if (isMessageedited)
                        {
                            <span class="fs-6"> (edited) </span>
                        }
                    </div>
                }
            </div>


        </div>
        @if (IsEditing)
        {
            <div class="row">
                <div class="d-flex flex-row ">
                    <button @onclick="EditCancel"> cancel  </button> <button @onclick="EditSave"> save  </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Inject]
    public IMessageViewModel messageViewModel { get; set; }
    [Parameter]
    public Message message { get; set; }
    private bool isMessageedited = false;

    protected override void OnInitialized()
    {
        messageViewModel.message = message;
        tempEditingMsg = message.content;
    }
    ElementReference refMessageContent;

    bool IsEditing = false;
    private void Edit()
    {
        IsEditing = true;
    }
    private void EditCancel()
    {
        IsEditing = false;
    }
    private void EditSave()
    {
        IsEditing = false;
        messageViewModel.message.content = tempEditingMsg;
        messageViewModel.Edit();
        isMessageedited = true;
    }
    string tempEditingMsg;
    private async Task OnEditingInput(Microsoft.AspNetCore.Components.ChangeEventArgs eventArgs)
    {
        tempEditingMsg = await JS.InvokeAsync<string>("getContentValue", refMessageContent);
        Console.WriteLine(tempEditingMsg);
    }
}